d
d <- as.POSIXlt(d)
names(unclass(d))
d$sec
d[sec]
d["sec"]
e <- Sys.time()
e
Sys.time()
e <- "January 11, 2018 21:13"
e
e <- January 11, 2018 21:13
f <- striptime(e, "%B %d, % Y %H:$M")
f <- strptime(e, "%B %d, % Y %H:$M")
f
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
datestring <- c("January 10, 2012 10:40")
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
d <- c("January 11, 2018 21:16")
e <- strptime(d, "%B %d, %Y %H:%M")
e
class(e)
?POSIXt
a <- as.Date("2018-01-11")
b <- as.Date("2008-09-15")
a-b
x <- as.Date("2012-03-01") y <- as.Date("2012-02-28")
x <- as.Date("2012-03-01")
y <- as.Date("2012-02-28")
x-y
y <- Sys.time()
z <- as.POSIXct("January 14, 2011 14:40:36")
z <- as.POSIXct("January 14, 2011, 14:40:36")
y <- Sys.date(0)
y <- Sys.date()
y <- Sys.time()
y
z <- as.POSIXct("2008-09-15 16:59:36 PST")
y-z
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6 < 7
10 <= 10
5 != 7
!5==7
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 | > 8 || 6 != 8 && 4 > 3.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints < 0)
all(ints > 0)
ints
ints()
TRUE && FALSE && TRUE
TRUE || FALSE || TRUE
TRUE && FALSE && TRUE && FALSE
TRUE || FALSE || TRUE || FALSE
any(c(6!=7,6==6,5<=6))
all(c(6!7,6==6,5<=6))
all(c(6=!7,6==6,5<=6))
> all(c(6!=7,6==6,5<=6))
all(c(6!=7,6==6,5<=6))
all(6!=7,6==6,5<=6)
any(6!=7,6==6,5<=6)
any(7!=7,6==6,5<=6)
all(7!=7,6==6,5<=6)
any(c("6!=7","6==6","5<=6"))
strptime("January 11,2018")
strptime("6 Dec 2001 12:33:45", "%d %b %Y %H:%M:%S")
any(c(7!=7,6==6,5<=6)
r
any(c(7!=7,6==6,5<=6))
all(c(7!=7,6==6,5<=6))
TRUE && FALSE || !TRUE || FALSE || !FALSE
FALSE || !TRUE || FALSE || !FALSE
FALSE || FALSE || !FALSE
FALSE | FALSE | !FALSE
FALSE | TRUE | !FALSE
FALSE | TRUE
TRUE && FALSE || !TRUE || FALSE || FALSE
FALSE || !TRUE || FALSE || FALSE
FALSE || FALSE || FALSE
TRUE && FALSE || TRUE || FALSE || FALSE
FALSE || TRUE || FALSE || FALSE
FALSE | TRUE | FALSE | FALSE
FALSE | TRUE
TRUE | FALSE | FALSE
TRUE | FALSE
FALSE || TRUE || FALSE
FALSE | TRUE
library("swirl")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5 > 8 || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints>0)
library("swir")
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('erdf')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainer(4, div=2)
remainder(4,div=2)
args(remainder)
submit()
evaluate(sd(c(1.4,3.6,7.9,8.8))
e
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x)(x[1]),c(8,4,0))
evaluate(function(x)(x[3]),c(8,4,0))
evaluate(function(x)(length(x)),c(8,4,0))
info()
evaluate(function(x)(x.),c(8,4,0))
evaluate(function(x)(,x,),c(8,4,0))
evaluate(function(x),(x[length(x)],c(8,4,0))
evaluate(function(x)(x[length(x)]),c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Hi","my","nama","nama")
library("swirl")
swirl()
function(first, second) {
first(second)
}
function(sd, c(15,14,12,20))
function(sd(), c(15,14,12,20))
function(mean, c(15,14,12,20))
FALSE || TRUE & FALSE || FALSE || FALSE & TRUE
library("swirl")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder()
submit()
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,d=2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x)(x[1]),c(8,4,0))
evaluate(function(x)(x[length(x)]),c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("My","name","is","is")
submit()
submit()
mad_libs(place="here",adjective="bony",noun="sauce")
submit()
submit()
submit()
"I" %p% "love" %'% "R!"
"I" %p% "love" %p% "R!"
funcasarg <- function(first,second) {
first(second)
}
funcasarg(sd,c(12,20,39,17,599))
storyline <- function(...) {
fillthisin <- list(...)
person <- fillthisin[["person"]]
verb <- fillthisin[["verb"]]
adjective <- fillthisin[["adjective"]]
paste(person,"likes to",verb,"in order to stay",adjective)
}
storyline(person="Grandma",verb="fish",adjective="full")
ls()
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
d2
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time()) -> t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, %B %d, %Y %M:%H)
strptime(t3, "%B %d, %Y, %M:%H")
strptime(t3, "%B %d, %Y, %H:%M")
t4 <- strptime(t3, "%B %d, %Y, %M:%H")
t4
t4 <- strptime(t3, "%B %d, %Y, %M:%H")
t4 <- strptime(t3, "%B %d, %Y, %H:%M")
t4 <- strptime(t3, %B %d, %Y %M:%H)
t4 <- strptime(t3, "%B %d, %Y %M:%H")
t4
t4 <- strptime(t3, "%B %d, %Y %H:$M")
> t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time, t1, units='days')
difftime(Sys.time(), t1, units='days')
lubridate()
?lubridate
??lubridate
install.packages("lubridate")
library("lubridate")
date
as.Date("20110407")
ymd(20170814)
x <- as.POSIXct("2009-08-07 00:00:01", tz = "America/New_York")
with_tz(w, "PST")
with_tz(x, "PST")
> with_tz(x, "GMT")
with_tz(x, "GMT")
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(3)
add <- function(a, b) {
(a + b)/n
}
add(2)
add(2,2,2)
add(2,2,n=10)
n=10
add(2,2)
Sys.time()
y <- as.POSIXct("2011-11-11 11:11:11 PST")
difftime(Sys.time(),y,units='hours')
difftime(Sys.time(),y,units='hr')
difftime(Sys.time(),y,units='auto')
pollutantmean(directory="specdata","nitrate",1:10)
setwd("~/Documents/R")
pollutantmean(directory="specdata","nitrate",1:10)
pollutantmean <- function(directory,pollutant,id=1:332){
paste(directory,pollutant,id)
}
pollutantmean(directory="specdata","nitrate",1:10)
pollutantmean(directory="specdata",pollutant="nitrate",1:10)
list.files(wd)
getwd()
list.files(wd)
pollutantmean <- function(directory,pollutant,id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
means <- c(means, na_removed)
}
result <- mean(means)
}
pollutant("specdata","sulfate",1:10)
pollutantmean("specdata","sulfate",1:10)
pollutantmean <- function(directory,pollutant="sulfate",id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
means <- c(means, na_removed)
}
result <- mean(means)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory,pollutant="sulfate",id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
means <- c(means, na_removed)
}
result <- mean(means)
return(result)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory,pollutant,id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
means <- c(means, na_removed)
}
result <- mean(means)
return(result)
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
all_files
all_files <- as.character(list.files(directory))
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory))
all_files
as.character(list.files(directory))
as.numeric(list.files(directory))
as.logical(list.files(directory))
paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")}
pollutantmean <- function(directory,pollutant,id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory))
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
}
}
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
}
current_file
pollutantmean <- function(directory,pollutant,id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory))
file_paths <- paste(directory, all_files, sep="")
}
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
}
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory,pollutant,id=1:332){
directory <- ("./specdata/")
means <- c()
all_files <- as.character(list.files(directory))
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
means <- c(means, na_removed)
}
result <- mean(means)
return(result)
}
complete <- function(directory,id=1:332) {
directory <- ("./specdata/")
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", c(2, 4, 8, 10, 12))
}
}
complete <- function(directory,id=1:332) {
nobs <- numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
}
complete("specdata", c(2, 4, 8, 10, 12))
}
}
complete <- function(directory,id=1:332) {
nobs <- numeric()
for (i in id) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
nobs = c(nobs, sum(complete.cases(newRead)))
}
return(data.frame(id, nobs))
complete("specdata", c(2, 4, 8, 10, 12))
}
complete("specdata", 30:25)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 3)
corr <- function(directory,threshold=0) {
df = complete(directory)
ids = df[df["nobs"] > threshold, ]
$id corr1 = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corr1 = c(corr1, cor(dff$sulfate, dff$nitrate))
}
return(corr1)
}
corr <- function(directory,threshold=0) {
df = complete(directory)
ids = df[df["nobs"] > threshold, ]$id
corr1 = numeric()
for (i in ids) {
newRead = read.csv(paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep = ""))
dff = newRead[complete.cases(newRead), ]
corr1 = c(corr1, cor(dff$sulfate, dff$nitrate))
}
return(corr1)
}
cr <- corr("specdata",150)
head(cr)
cr <- corr("specdata",400)
summary(cr)
length(cr)
cr <- corr("specdata", 5000)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
